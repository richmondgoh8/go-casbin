// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type HealthResponse struct {
	Message string `json:"message"`
}

type TokenResponse struct {
	AccessToken string `json:"accessToken"`
}

type RoleRequest struct {
	Role Roles `json:"role"`
}

type RequestAction string

const (
	RequestActionRead RequestAction = "READ"
)

var AllRequestAction = []RequestAction{
	RequestActionRead,
}

func (e RequestAction) IsValid() bool {
	switch e {
	case RequestActionRead:
		return true
	}
	return false
}

func (e RequestAction) String() string {
	return string(e)
}

func (e *RequestAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestAction", str)
	}
	return nil
}

func (e RequestAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RequestObj string

const (
	RequestObjUser RequestObj = "USER"
)

var AllRequestObj = []RequestObj{
	RequestObjUser,
}

func (e RequestObj) IsValid() bool {
	switch e {
	case RequestObjUser:
		return true
	}
	return false
}

func (e RequestObj) String() string {
	return string(e)
}

func (e *RequestObj) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestObj(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestObj", str)
	}
	return nil
}

func (e RequestObj) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Roles string

const (
	RolesAdmin   Roles = "ADMIN"
	RolesManager Roles = "MANAGER"
)

var AllRoles = []Roles{
	RolesAdmin,
	RolesManager,
}

func (e Roles) IsValid() bool {
	switch e {
	case RolesAdmin, RolesManager:
		return true
	}
	return false
}

func (e Roles) String() string {
	return string(e)
}

func (e *Roles) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Roles(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Roles", str)
	}
	return nil
}

func (e Roles) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
