package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"strings"

	"github.com/richmondgoh8/go-casbin/graph/model"
	custommiddleware "github.com/richmondgoh8/go-casbin/pkg/middleware"
	"github.com/richmondgoh8/go-casbin/pkg/middleware/logger"
	"github.com/richmondgoh8/go-casbin/pkg/middleware/models"
)

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (*model.HealthResponse, error) {
	//ctx.Set("endpoint", c.Request.URL.RequestURI())
	logger.Info("health log handler", ctx, nil)
	ctx = context.WithValue(ctx, "endpoint", "Health")
	return r.HealthSvc.GetHeartbeat(ctx), nil
}

// GenerateToken is the resolver for the generateToken field.
func (r *queryResolver) GenerateToken(ctx context.Context, input model.RoleRequest) (*model.TokenResponse, error) {
	token, err := custommiddleware.GenerateToken(
		models.JWTPayload{
			Role: strings.ToLower(input.Role.String()),
		},
		1440)
	if err != nil {
		return nil, err
	}

	return &model.TokenResponse{AccessToken: token}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
